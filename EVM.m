% EVM - Error Vector Magnitude
% ALGORITHM:
%              _____________________________________
%             /       N-1                           |
%            /  1   ------
%           /  ---  \
%       \  /    N   /      (I - Ic)^2 + (Q - Qc)^2          , where  I and Q are real and imaginary part of each 
%        \/         ------                                             data sample respectively
%                    i=0                                             Ic and Qc are real and imaginary part of
% EVM = ---------------------------------------------------            closest constellation point respectively
%                _________________                                   Iref and Qref are real and imaginary part 
%               /                                                      of referent point respectivelly
%             \/  Iref^2 + Qref^2
%             
%             
% 
% INPUTS:
%     data - complex samples (I,Q)
%     constellation - array of points in constellation
%                   - constellation should be generated by or obey the same rules as function "constellation.m"
%     referent_point (optional) - complex number representing referent point described in algorithm
                                                                    
function evm = EVM(data, cons, referent_point)
N = length(data);
if nargin < 3
    referent_point = cons(1);
end

data = reshape(data, N, 1);
d = [];
for i=1:length(cons)
    d = [d, data-cons(i)];                                                                                      %d is matrix of distances of each sample to each 
end                                                                                                             %point in constellation
d = real(d).^2 + imag(d).^2;                                                                                    %(I-Ic)^2 + (Q-Qc)^2 
d = min(d, [], 2);                                                                                              %getting minimum distance for each row (each sample)

evm = sqrt(sum(d) / N);                                                                                         %calculationg evm
evm = evm / abs(referent_point);
end

